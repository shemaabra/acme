<?php

namespace app\models;

use Yii;
use yii\db\Expression;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $uid
 * @property string $username
 * @property string $email
 * @property string $password
 * @property int $status
 * @property int $contact_email
 * @property int $contact_phone
 * @property string $created
 * @property string $updated
 *
 * @property Message[] $messages
 * @property Message[] $messages0
 * @property PhoneNumber[] $phoneNumbers
 * @property Trip[] $trips
 */
class User extends \yii\db\ActiveRecord
{
	const STATUS_INSERTED = 0;
	const STATUS_ACTIVE = 1;
	const STATUS_BLOCKED = 2;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['uid', 'username', 'email', 'password'], 'required'],
            [['status', 'contact_email', 'contact_phone'], 'integer'],
			[['email'], 'email'],
            [['created', 'updated'], 'safe'],
            [['uid', 'password'], 'string', 'max' => 60],
            [['username'], 'string', 'max' => 45],
            [['email'], 'string', 'max' => 255],
            [['uid'], 'unique'],
            [['email'], 'unique'],
        ];
    }

    public function beforeValidate()
	{
		if ($this->isNewRecord) {
			$this->setUid();
		}

		return parent::beforeValidate(); // TODO: Change the autogenerated stub
	}

	public function beforeSave($insert)
	{
		if ($this->isNewRecord) {
			$this->password = Yii::$app->getSecurity()->generatePasswordHash($this->password);
		}
		$this->updated = new Expression('NOW()');
		return parent::beforeSave($insert); // TODO: Change the autogenerated stub
	}

	private function setUid()
	{
		$this->uid = Yii::$app->getSecurity()->generatePasswordHash(date('YmdHis').rand(1, 9999));
	}

	public function activate() {
    	$this->status = self::STATUS_ACTIVE;
    	//$this->setUid();  //if email doesnt work comment this line
    	return $this->save();
	}

	/**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'uid' => 'Uid',
            'username' => 'Username',
            'email' => 'Email',
            'password' => 'Password',
            'status' => 'Status',
            'contact_email' => 'Contact Email',
            'contact_phone' => 'Contact Phone',
            'created' => 'Created',
            'updated' => 'Updated',
        ];
    }

	public static function findIdentity($id)
	{
		return static::findOne($id);
	}
    /**
     * Gets query for [[Messages]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getMessages()
    {
        return $this->hasMany(Message::className(), ['from_user_id' => 'id']);
    }

    /**
     * Gets query for [[Messages0]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getMessages0()
    {
        return $this->hasMany(Message::className(), ['to_user_id' => 'id']);
    }

    /**
     * Gets query for [[PhoneNumbers]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPhoneNumbers()
    {
        return $this->hasMany(PhoneNumber::className(), ['user_id' => 'id']);
    }

    /**
     * Gets query for [[Trips]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTrips()
    {
        return $this->hasMany(Trip::className(), ['user_id' => 'id']);
    }
}
